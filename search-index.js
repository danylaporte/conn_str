var N=null,E="",T="t",U="u",searchIndex={};
var R=["option","result","error","try_from","borrow","borrow_mut","try_into","type_id","typeid","string","formatter","from_str","EFConnStr","MsSqlConnStr"];

searchIndex["conn_str"]={"doc":"Database connection string parsing library for Rust.","i":[[3,R[12],"conn_str","Represent an Entity Framework Connection String",N,N],[3,R[13],E,"Represent a Sql Connection String",N,N],[4,"Error",E,"A Sql Connection String parsing error",N,N],[13,"KeyNotSupported",E,E,0,N],[13,"NotAValidBool",E,E,0,N],[13,"SyntaxError",E,E,0,N],[5,"append_key_value",E,"Encode a key and value for use in a connection string",N,[[["bool"],[R[9]],["str"]]]],[11,"metadata",E,E,1,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"name",E,E,1,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"provider",E,E,1,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"provider_connection_string",E,E,1,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"application_name",E,E,2,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"data_source",E,E,2,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"encrypt",E,E,2,[[["self"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"encrypt_or",E,E,2,[[["self"],["bool"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"initial_catalog",E,E,2,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"integrated_security",E,E,2,[[["self"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"integrated_security_or",E,E,2,[[["self"],["bool"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"multiple_active_result_sets",E,E,2,[[["self"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"multiple_active_result_sets_or",E,E,2,[[["self"],["bool"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"password",E,E,2,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"trust_server_certificate",E,E,2,[[["self"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"trust_server_certificate_or",E,E,2,[[["self"],["bool"]],[[R[1],["bool",R[2]]],[R[2]],["bool"]]]],[11,"user_id",E,E,2,[[["self"]],[[R[0],["str"]],["str"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[1]]]],[11,R[4],E,E,1,[[["self"]],[T]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[],[R[1]]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[1]]]],[11,R[4],E,E,2,[[["self"]],[T]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[],[R[1]]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[[T],["self"]]]],[11,"to_string",E,E,0,[[["self"]],[R[9]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[1]]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[],[R[1]]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"clone",E,E,0,[[["self"]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[1]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[1]]]],[11,R[11],E,E,1,[[["str"]],[R[1]]]],[11,R[11],E,E,2,[[["str"]],[R[1]]]],[11,"description",E,E,0,[[["self"]],["str"]]],[11,"cause",E,E,0,[[["self"]],[[R[2]],[R[0],[R[2]]]]]]],"p":[[4,"Error"],[3,R[12]],[3,R[13]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);